---
import SunIcon from "@/icons/sun.svg";
import MoonIcon from "@/icons/moon.svg";
import DeviceDesktopIcon from "@/icons/device-desktop.svg";
import { useTranslations } from "@/i18n";

const THEMES = [
  { key: "dark", icon: MoonIcon, label: useTranslations(Astro, "theme.dark") },
  { key: "light", icon: SunIcon, label: useTranslations(Astro, "theme.light") },
  { key: "system", icon: DeviceDesktopIcon, label: useTranslations(Astro, "theme.system") },
];
---

<div class="relative">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none items-center justify-center border-none size-10 flex hover:scale-125 transition"
  >
    <span class="sr-only">{useTranslations(Astro, "theme.select")}</span>
    {
      THEMES.map((theme, index) => (
        <theme.icon
          id={theme.key}
          aria-label={theme.label}
          class={`theme-toggle-icon size-5 transition-all ${index === 0 ? "" : "absolute"}`}
        />
      ))
    }
  </button>
  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li
            data-id={theme.key}
            class="flex items-center px-2 py-1.5 cursor-pointer gap-1.5 hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm"
          >
            <theme.icon aria-label={theme.label} class="size-4" />
            {theme.label}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const updateTheme = () => {
    if (remove != null) remove();

    matchMedia.addEventListener("change", updateTheme);
    remove = () => matchMedia.removeEventListener("change", updateTheme);

    const themePreference = getThemePreference();
    const isDark = themePreference === "dark" || (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  };

  updateTheme();

  const toggleThemesMenu = (event) => {
    event.stopPropagation();
    themesMenu.classList.toggle("open");
  };

  document.getElementById("theme-toggle-btn").addEventListener("click", toggleThemesMenu);
  document.addEventListener("click", () => {
    if (themesMenu.classList.contains("open")) themesMenu.classList.remove("open");
  });
  themesMenu.addEventListener("click", (event) => {
    const theme = event.target.closest("li")?.dataset.id;

    if (!theme) return;

    localStorage.setItem("theme", theme);
    updateTheme();
  });

  document.addEventListener("astro:after-swap", () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: "instant" });
  });
</script>
