---
import { getLanguage, useTranslations } from "@/i18n";
import ThemeToggle from "@/components/ThemeToggle.astro";
import LanguageSelect from "@/components/LanguageSelect.astro";

const language = getLanguage(Astro);
const navItems = [
  { language, title: useTranslations(Astro, "header.experience"), url: `/${Astro.currentLocale}/#experience` },
  { language, title: useTranslations(Astro, "header.projects"), url: `/${Astro.currentLocale}/#projects` },
  { language, title: useTranslations(Astro, "header.about-me"), url: `/${Astro.currentLocale}/#about-me` },
];
---

<header class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2">
  <nav
    class="flex px-3 gap-1 sm:gap-2 text-sm font-medium rounded-full text-gray-700 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map(({ url, title }) => (
        <a
          href={url}
          data-url={url}
          data-language={language}
          class="relative block px-2 py-2 transition hover:text-purple-600 dark:hover:text-purple-400"
        >
          {title}
        </a>
      ))
    }

    <ThemeToggle />
    <LanguageSelect />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll<HTMLAnchorElement>("header nav a");

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return;

        navItems.forEach((item) => {
          const { url, language } = item.dataset;
          const entryUrl = `/${language}/#${entry.target.id}`;

          if (url == entryUrl) {
            item.classList.add("text-purple-500");
          } else {
            item.classList.remove("text-purple-500");
          }
        });
      });
    };

    const observer = new IntersectionObserver(callback, { root: null, rootMargin: "0px", threshold: 0.3 });

    sections.forEach((section) => observer.observe(section));

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => observer.observe(section));
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>
